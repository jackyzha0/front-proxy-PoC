// Code generated by go-swagger; DO NOT EDIT.

package core

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new core API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for core API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetSocialNetworkApp get social network app API
*/
func (a *Client) GetSocialNetworkApp(params *GetSocialNetworkAppParams) (*GetSocialNetworkAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSocialNetworkAppParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSocialNetworkApp",
		Method:             "GET",
		PathPattern:        "/socialNetworkApps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSocialNetworkAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSocialNetworkAppOK), nil

}

/*
GetSocialProfile get social profile API
*/
func (a *Client) GetSocialProfile(params *GetSocialProfileParams) (*GetSocialProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSocialProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSocialProfile",
		Method:             "GET",
		PathPattern:        "/socialProfiles/{socialProfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSocialProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSocialProfileOK), nil

}

/*
GetSocialProfileByUserIDAndType get social profile by user Id and type API
*/
func (a *Client) GetSocialProfileByUserIDAndType(params *GetSocialProfileByUserIDAndTypeParams) (*GetSocialProfileByUserIDAndTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSocialProfileByUserIDAndTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSocialProfileByUserIdAndType",
		Method:             "GET",
		PathPattern:        "/socialProfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSocialProfileByUserIDAndTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSocialProfileByUserIDAndTypeOK), nil

}

/*
GetSocialProfiles get social profiles API
*/
func (a *Client) GetSocialProfiles(params *GetSocialProfilesParams) (*GetSocialProfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSocialProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSocialProfiles",
		Method:             "GET",
		PathPattern:        "/v2.0/socialProfilesMulti",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSocialProfilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSocialProfilesOK), nil

}

/*
GetSocialProfilesByOwner get social profiles by owner API
*/
func (a *Client) GetSocialProfilesByOwner(params *GetSocialProfilesByOwnerParams) (*GetSocialProfilesByOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSocialProfilesByOwnerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSocialProfilesByOwner",
		Method:             "GET",
		PathPattern:        "/socialProfiles/owner",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSocialProfilesByOwnerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSocialProfilesByOwnerOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
